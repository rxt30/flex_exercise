Code that follows the syntax rules in this document can be decoded succesfully by this compiler.
If there is an input that we can not decode you will get an error message that should help you to correct the error.

Rules:

String:
A string can exist of the letters a-z and A-Z. The capitalization of letters gets decoded correctly and therefore matters. Mutated vowls and the sharp s are currently not working and won't be implemented. The keywords for the code can not be used as normal strings as well.

Integers:
Integers can exist out of the numbers 0-9.

Float:
A Floating Number can exist of a normal integer number with as many decimal places as you mant. For the decimal places you can use the numbers 0-9. To 

Variables:
To initalize a variable of your liking please use this syntax:
type name = input;
To define the type of your variable you need to change the placeholder "type" to the keyword for your type. Currently are the following types implemented(the corresponding keyword is written in the brackets): Integer(int), String(string), Boolean(bool) and soon Float(float)
By replacing the placeholder "name" you can set the name of your new variable. For the name of your liking you can use a normal string
As an input for the variables float and int you can just write the number you wish. The input for the Boolean variables can be set to the keyword true or false. To save a string you need to put your input into quotation marks.
To update a variable you can use the syntax name = input;

arithmetic operations:
Arithmetic operations can be performed with numbers and variables. You can also use multiple operations in one big operation. To decide which operation we perfom first we use the common rules for Algebra, which where specified in the book "La Géométrie" written by the author René Descartes. You can use the following operations:
    PLUS: pl1 + pl2
    MINUS: pl1 - pl2
    MULTIPLIKATION: pl1 * pl2
    DIVISION: pl1 / pl2
    DIVISION WITH OUT ACCESS: pl1 // pl2
    MODULO: pl1 % pl2
The placeholders pl1 and pl2 need to be changed to either your number or your variable. The spaces can be filled in, but are not needed for correct decoding.
In the operations DIVISION, DIVISION WITH OUT ACCESS and MODULO do not accept the value zero for the placeholder pl2.(If you wonder why, Maths does not allow this either).
The operation PLUS can also be used to atatch to strings or varaibles of the type stirng togehter. To atatch strings you need to put your input into quotation marks.  

logik operations:
To compare to values with each other you can use the following logik operations:
    OR: pl1 || pl2
    AND: pl1 && pl2
    EQUAL: pl1 == pl2
    NOT EQUAL: pl1 != pl2
    RIGHT GREATER: pl1 < pl2
    LEFT GREATER: pl1 > pl2
To connect multiple rules you can use brackets around the priorized operation. The operations OR and AND can only be performed to values of the type boolean. The operations LEFT/RIGHT GREATER can only be performed on numbers.

comment:
With the hashtag symbol at the begining of the line, the whole line can be used as a comment and will not be decoded by the compiler.

IF:


For:

While:


